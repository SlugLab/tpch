#!/bin/bash

# Configuration variables
# Scale factor. 1 = 1GB, 10 = 10GB. TPC-H has rules about which scale factors
# are considered valid for comparative purposes.
SCALE=100 #GB

# Other configuration variables
BASEDIR=$(dirname "$0")
BASEDIR=$(
  cd "$BASEDIR"
  pwd
)
TPCHTMP=/scratchNVME/pg-tpch/tmp
PGDATADIR=/scratchNVME/pgdata${SCALE}GB
PGPORT=5446
REMAKE_DATA=true
DB_NAME="tpch"
POPULATE_DB=true
CREATE_MIN_INDEXES=false
CREATE_ALL_INDEXES=true
PERFDATADIR=perfdata
CORES=$(grep -c ^processor /proc/cpuinfo)
PGUSER="psafayen"
PGBINDIR=//scratchNVME/pg-tpch/usr/bin
LOGGING=false

# Install teardown() function to kill any lingering jobs
teardown() {
  echo "Cleaning up before exiting"
  sudo -u $PGUSER $PGBINDIR/pg_ctl stop -m fast -D "$PGDATADIR" 2>/dev/null && sleep 1
  JOBS=$(jobs -p)
  test -z "$JOBS" || { kill $JOBS && sleep 2; }
  JOBS=$(jobs -p)
  test -z "$JOBS" || kill -9 $JOBS
}
test -z "${DEBUG-}" && trap "teardown" EXIT

# Set up perf
perf_set_kernel_params() {
  if [ -r /proc/sys/kernel/kptr_restrict ] && [ $(cat /proc/sys/kernel/kptr_restrict) -ne 0 ]; then
    echo "Perf requires reading kernel symbols."
    echo 0 | sudo tee /proc/sys/kernel/kptr_restrict
  fi
  if [ -r /proc/sys/kernel/perf_event_paranoid ] && [ $(cat /proc/sys/kernel/perf_event_paranoid) -ne -1 ]; then
    echo "Need to enable the reading of performance events."
    echo -1 | sudo tee /proc/sys/kernel/perf_event_paranoid
  fi
  if [ -r /proc/sys/kernel/perf_event_mlock_kb ] && [ $(cat /proc/sys/kernel/perf_event_mlock_kb) -lt 1024 ]; then
    echo "Need to give more memory to perf."
    echo 1024 | sudo tee /proc/sys/kernel/perf_event_mlock_kb
  fi
}

# Restart and drop caches
restart_drop_caches() {
  echo "Restart postgres and drop caches."
  sudo -u $PGUSER $PGBINDIR/pg_ctl stop -D $PGDATADIR
  sync && echo 3 | sudo tee /proc/sys/vm/drop_caches
  #sudo -u $PGUSER perf c2c record -F 60000 -a  $PGBINDIR/postgres -D "$PGDATADIR" -p $PGPORT &

  sudo -u $PGUSER perf stat -C 8-15 --all-user -e mem_load_uops_l3_hit_retired.xsnp_hit,mem_load_uops_l3_hit_retired.xsnp_miss,mem_load_uops_l3_hit_retired.xsnp_none,mem_load_uops_l3_hit_retired.xsnp_hitm taskset -c 8-15 $PGBINDIR/postgres -D "$PGDATADIR" -p $PGPORT >>/scratchNVME/pg-tpch/results/SF100/SF100-$CURRENT_QUIRY-stat.txt 2>&1 &
  #perf stat -C 0-7 --all-user -e mem_load_uops_l3_hit_retired.xsnp_hit,mem_load_uops_l3_hit_retired.xsnp_miss,mem_load_uops_l3_hit_retired.xsnp_none,mem_load_uops_l3_hit_retired.xsnp_hitm taskset -c 0-7 mserver5 --dbpath=/home/victoryang00/bak/$5/$5 --set monet_vault_key=/home/victoryang00/bak/$5/$5/.vaultkey > $5-$6-c2c-stat.txt 2>&1 &
  PGPID=$!

  while ! sudo -u $PGUSER $PGBINDIR/pg_ctl status -D $PGDATADIR | grep "server is running" -q; do
    echo "Waiting for the Postgres server to start"
    sleep 3
  done
}

# Calculates elapsed time
timer() {
  if [[ $# -eq 0 ]]; then
    echo $(date '+%s')
  else
    local stime=$1
    etime=$(date '+%s')

    if [[ -z "$stime" ]]; then stime=$etime; fi

    dt=$((etime - stime))
    ds=$((dt % 60))
    dm=$(((dt / 60) % 60))
    dh=$((dt / 3600))
    printf '%d:%02d:%02d' $dh $dm $ds
  fi
}

# To perform checks
die() {
  echo "$@"
  exit -1
}

# Check for the running Postgres; exit if there is any on the given port
PGPORT_PROCLIST="$(lsof -i tcp:$PGPORT | tail -n +2 | awk '{print $2}')"
if [[ $(echo "$PGPORT_PROCLIST" | wc -w) -gt 0 ]]; then
  echo "The following processes have taken port $PGPORT"
  echo "Please terminate them before running this script"
  echo
  for p in $PGPORT_PROCLIST; do
    ps -o pid,cmd $p
  done
  exit -1
fi

# Check if a Postgres server is running in the same directory
if sudo -u $PGUSER $PGBINDIR/pg_ctl status -D $PGDATADIR | grep "server is running" -q; then
  echo "A Postgres server is already running in the selected directory. Exiting."
  sudo -u $PGUSER $PGBINDIR/pg_ctl status -D $PGDATADIR
  exit -2
fi

cd "$BASEDIR"
