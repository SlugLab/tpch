vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /scratchNVME/pg-tpch/perfdata-100GB/q13/13-2-uarch -command stop.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/scratchNVME/pg-tpch/perfdata-100GB/q13/13-2-uarch'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-2369389-ares.sc' file   vtune: Executing actions 12 % Loading 'systemcollector-2369389-ares.sc' file   vtune: Executing actions 12 % Loading 'system-wide.perf' file                  vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `nvme-core.ko'         vtune: Executing actions 19 % Resolving information for `nvme.ko'              
vtune: Warning: Cannot locate debugging information for file `/lib/modules/5.15.0-47-generic/kernel/drivers/nvme/host/nvme.ko'.
vtune: Warning: Cannot locate debugging information for file `/lib/modules/5.15.0-47-generic/kernel/drivers/nvme/host/nvme-core.ko'.
vtune: Warning: Cannot read load addresses of sections from `/sys/module/nvme/sections'. This may affect the correctness of symbol resolution for `/lib/modules/5.15.0-47-generic/kernel/drivers/nvme/host/nvme.ko'. Make sure this directory exists and all files in this directory have read permissions.
vtune: Warning: Cannot read load addresses of sections from `/sys/module/nvme-core/sections'. This may affect the correctness of symbol resolution for `/lib/modules/5.15.0-47-generic/kernel/drivers/nvme/host/nvme-core.ko'. Make sure this directory exists and all files in this directory have read permissions.
vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 20 % Resolving information for `libc.so.6'            vtune: Executing actions 20 % Resolving information for `postgres'             
vtune: Warning: Cannot locate file `vmlinux'.
vtune: Executing actions 20 % Resolving information for `vmlinux'              
vtune: Warning: Cannot locate debugging information for the Linux kernel. Source-level analysis will not be possible. Function-level analysis will be limited to kernel symbol tables. See the Enabling Linux Kernel Analysis topic in the product online help for instructions.
vtune: Executing actions 21 % Resolving information for `vmlinux'              vtune: Executing actions 22 % Resolving information for `vmlinux'              vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving interrupt name information             vtune: Executing actions 26 % Resolving interrupt name information             vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 232.147s
    Clockticks: 671,916,000,000
    Instructions Retired: 717,216,000,000
    CPI Rate: 0.937
    Retiring: 26.2% of Pipeline Slots
        Light Operations: 25.5% of Pipeline Slots
        Heavy Operations: 0.7% of Pipeline Slots
            Microcode Sequencer: 0.7% of Pipeline Slots
                Assists: 0.0% of Pipeline Slots
                CISC: 0.7% of Pipeline Slots
    Front-End Bound: 9.0% of Pipeline Slots
        Front-End Latency: 0.0% of Pipeline Slots
            ICache Misses: 0.7% of Clockticks
            ITLB Overhead: 0.2% of Clockticks
            Branch Resteers: 2.3% of Clockticks
            DSB Switches: 3.0% of Clockticks
            Length Changing Prefixes: 0.0% of Clockticks
            MS Switches: 0.3% of Clockticks
        Front-End Bandwidth: 8.9% of Pipeline Slots
            Front-End Bandwidth MITE: 7.3% of Pipeline Slots
            Front-End Bandwidth DSB: 4.0% of Pipeline Slots
            (Info) DSB Coverage: 50.0%
    Bad Speculation: 2.9% of Pipeline Slots
        Branch Mispredict: 2.9% of Pipeline Slots
        Machine Clears: 0.0% of Pipeline Slots
    Back-End Bound: 61.9% of Pipeline Slots
     | A significant portion of pipeline slots are remaining empty. When
     | operations take too long in the back-end, they introduce bubbles in the
     | pipeline that ultimately cause fewer pipeline slots containing useful
     | work to be retired per cycle than the machine is capable to support. This
     | opportunity cost results in slower execution. Long-latency operations
     | like divides and memory operations can cause this, as can too many
     | operations being directed to a single execution port (for example, more
     | multiply operations arriving in the back-end per cycle than the execution
     | unit can support).
     |
        Memory Bound: 53.7% of Pipeline Slots
         | The metric value is high. This can indicate that the significant
         | fraction of execution pipeline slots could be stalled due to demand
         | memory load and stores. Use Memory Access analysis to have the metric
         | breakdown by memory hierarchy, memory bandwidth information,
         | correlation by memory objects.
         |
            L1 Bound: 9.1% of Clockticks
                DTLB Overhead: 13.7% of Clockticks
                Loads Blocked by Store Forwarding: 0.3% of Clockticks
                Lock Latency: 0.0% of Clockticks
                Split Loads: 0.0% of Clockticks
                4K Aliasing: 0.2% of Clockticks
                FB Full: 74.9% of Clockticks
            L2 Bound: 0.0% of Clockticks
            L3 Bound: 4.0% of Clockticks
                Contested Accesses: 0.0% of Clockticks
                Data Sharing: 0.0% of Clockticks
                L3 Latency: 3.1% of Clockticks
                SQ Full: 0.0% of Clockticks
            DRAM Bound: 40.7% of Clockticks
             | This metric shows how often CPU was stalled on the main memory
             | (DRAM). Caching typically improves the latency and increases
             | performance.
             |
                Memory Bandwidth: 7.1% of Clockticks
                 | Issue: A significant fraction of cycles was stalled due to
                 | approaching bandwidth limits of the main memory (DRAM).
                 | 
                 | Tips: Improve data accesses to reduce cacheline transfers
                 | from/to memory using these possible techniques:
                 |     - Consume all bytes of each cacheline before it is
                 |       evicted (for example, reorder structure elements and
                 |       split non-hot ones).
                 |     - Merge compute-limited and bandwidth-limited loops.
                 |     - Use NUMA optimizations on a multi-socket system.
                 | 
                 | Note: software prefetches do not help a bandwidth-limited
                 | application.
                 |
                Memory Latency: 82.5% of Clockticks
                 | Issue: A significant fraction of cycles was stalled due to
                 | the latency of the main memory (DRAM).
                 | 
                 | Tips: Improve data accesses or interleave them with compute
                 | using such possible techniques as data layout re-structuring
                 | or software prefetches (through the compiler).
                 |
                    Local DRAM: 21.6% of Clockticks
                     | The number of CPU stalls on loads from the local memory
                     | exceeds the threshold. Consider caching data to improve
                     | the latency and increase the performance.
                     |
                    Remote DRAM: 0.0% of Clockticks
                    Remote Cache: 0.0% of Clockticks
            Store Bound: 40.3% of Clockticks
             | Issue: CPU was stalled on store operations for a significant
             | fraction of cycles.
             | 
             | Tips: Consider False Sharing analysis as your next step.
             |
                Store Latency: 10.8% of Clockticks
                 | This metric represents a fraction of cycles the CPU spent
                 | handling long-latency store misses (missing the 2nd level
                 | cache). Consider avoiding/reducing unnecessary (or easily
                 | loadable/computable) memory store. Note that this metric
                 | value may be highlighted due to a Lock Latency issue.
                 |
                False Sharing: 0.0% of Clockticks
                Split Stores: 0.0% of Clockticks
                DTLB Store Overhead: 0.7% of Clockticks
                 | Issue: A significant fraction of cycles is spent on handling
                 | first-level data TLB store misses.
                 | 
                 | Tips:
                 | 
                 | 1. As with ordinary data caching, focus on improving data
                 | locality and reducing working-set size to minimize the DTLB
                 | overhead.
                 | 
                 | 2. Consider using profile-guided optimization (PGO) to
                 | collocate frequently-used data on the same page.
                 | 
                 | 3. Try using larger page sizes for large amounts of
                 | frequently-used data.
                 |
        Core Bound: 8.2% of Pipeline Slots
            Divider: 0.0% of Clockticks
            Port Utilization: 14.0% of Clockticks
                Cycles of 0 Ports Utilized: 56.8% of Clockticks
                Cycles of 1 Port Utilized: 8.9% of Clockticks
                Cycles of 2 Ports Utilized: 11.4% of Clockticks
                Cycles of 3+ Ports Utilized: 23.1% of Clockticks
                    ALU Operation Utilization: 14.3% of Clockticks
                        Port 0: 10.5% of Clockticks
                        Port 1: 10.9% of Clockticks
                        Port 5: 11.5% of Clockticks
                        Port 6: 24.5% of Clockticks
                    Load Operation Utilization: 16.0% of Clockticks
                        Port 2: 19.6% of Clockticks
                        Port 3: 20.6% of Clockticks
                    Store Operation Utilization: 19.1% of Clockticks
                        Port 4: 19.1% of Clockticks
                        Port 7: 10.9% of Clockticks
    Average CPU Frequency: 3.094 GHz
    Total Thread Count: 10
    Paused Time: 0s
Effective CPU Utilization: 5.8%
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    Average Effective CPU Utilization: 0.936 out of 16
Collection and Platform Info
    Operating System: 5.15.0-47-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION="Ubuntu 22.04.1 LTS"
    Computer Name: ares
    Result Size: 53.4 MB 
    Collection start time: 17:30:14 18/09/2022 UTC
    Collection stop time: 17:34:06 18/09/2022 UTC
    Collector Type: Driverless Perf system-wide sampling
    CPU
        Name: Intel(R) Xeon(R) E5/E7 v3 Processor code named Haswell
        Frequency: 2.400 GHz
        Logical CPU Count: 16
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: not detected

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
