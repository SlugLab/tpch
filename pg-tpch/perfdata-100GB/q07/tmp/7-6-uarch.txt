vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /scratchNVME/pg-tpch/perfdata-100GB/q07/7-6-uarch -command stop.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/scratchNVME/pg-tpch/perfdata-100GB/q07/7-6-uarch'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-2261592-ares.sc' file   vtune: Executing actions 12 % Loading 'systemcollector-2261592-ares.sc' file   vtune: Executing actions 12 % Loading 'system-wide.perf' file                  vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `igb.ko'               vtune: Executing actions 19 % Resolving information for `nvme.ko'              vtune: Executing actions 19 % Resolving information for `nf_conntrack.ko'      vtune: Executing actions 19 % Resolving information for `nvme-core.ko'         vtune: Executing actions 19 % Resolving information for `nf_tables.ko'         
vtune: Warning: Cannot locate debugging information for file `/lib/modules/5.15.0-47-generic/kernel/drivers/net/ethernet/intel/igb/igb.ko'.
vtune: Warning: Cannot read load addresses of sections from `/sys/module/igb/sections'. This may affect the correctness of symbol resolution for `/lib/modules/5.15.0-47-generic/kernel/drivers/net/ethernet/intel/igb/igb.ko'. Make sure this directory exists and all files in this directory have read permissions.
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/lib/modules/5.15.0-47-generic/kernel/drivers/nvme/host/nvme-core.ko'.
vtune: Warning: Cannot read load addresses of sections from `/sys/module/nvme-core/sections'. This may affect the correctness of symbol resolution for `/lib/modules/5.15.0-47-generic/kernel/drivers/nvme/host/nvme-core.ko'. Make sure this directory exists and all files in this directory have read permissions.
vtune: Warning: Cannot locate debugging information for file `/lib/modules/5.15.0-47-generic/kernel/drivers/nvme/host/nvme.ko'.
vtune: Warning: Cannot locate debugging information for file `/lib/modules/5.15.0-47-generic/kernel/net/netfilter/nf_conntrack.ko'.
vtune: Warning: Cannot read load addresses of sections from `/sys/module/nf_conntrack/sections'. This may affect the correctness of symbol resolution for `/lib/modules/5.15.0-47-generic/kernel/net/netfilter/nf_conntrack.ko'. Make sure this directory exists and all files in this directory have read permissions.
vtune: Warning: Cannot read load addresses of sections from `/sys/module/nvme/sections'. This may affect the correctness of symbol resolution for `/lib/modules/5.15.0-47-generic/kernel/drivers/nvme/host/nvme.ko'. Make sure this directory exists and all files in this directory have read permissions.
vtune: Warning: Cannot locate debugging information for file `/lib/modules/5.15.0-47-generic/kernel/net/netfilter/nf_tables.ko'.
vtune: Warning: Cannot read load addresses of sections from `/sys/module/nf_tables/sections'. This may affect the correctness of symbol resolution for `/lib/modules/5.15.0-47-generic/kernel/net/netfilter/nf_tables.ko'. Make sure this directory exists and all files in this directory have read permissions.
vtune: Executing actions 20 % Resolving information for `libc.so.6'            vtune: Executing actions 21 % Resolving information for `libc.so.6'            vtune: Executing actions 21 % Resolving information for `postgres'             
vtune: Warning: Cannot locate file `vmlinux'.
vtune: Executing actions 21 % Resolving information for `vmlinux'              
vtune: Warning: Cannot locate debugging information for the Linux kernel. Source-level analysis will not be possible. Function-level analysis will be limited to kernel symbol tables. See the Enabling Linux Kernel Analysis topic in the product online help for instructions.
vtune: Executing actions 22 % Resolving information for `vmlinux'              vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving interrupt name information             vtune: Executing actions 26 % Resolving interrupt name information             vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 172.409s
    Clockticks: 225,480,000,000
    Instructions Retired: 202,692,000,000
    CPI Rate: 1.112
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Retiring: 25.4% of Pipeline Slots
        Light Operations: 21.3% of Pipeline Slots
        Heavy Operations: 4.0% of Pipeline Slots
            Microcode Sequencer: 4.0% of Pipeline Slots
                Assists: 0.0% of Pipeline Slots
                CISC: 4.0% of Pipeline Slots
    Front-End Bound: 28.5% of Pipeline Slots
     | Issue: A significant portion of Pipeline Slots is remaining empty due to
     | issues in the Front-End.
     | 
     | Tips:  Make sure the code working size is not too large, the code layout
     | does not require too many memory accesses per cycle to get enough
     | instructions for filling four pipeline slots, or check for microcode
     | assists.
     |
        Front-End Latency: 16.8% of Pipeline Slots
         | This metric represents a fraction of slots during which CPU was
         | stalled due to front-end latency issues, such as instruction-cache
         | misses, ITLB misses or fetch stalls after a branch misprediction. In
         | such cases, the front-end delivers no uOps.
         |
            ICache Misses: 8.8% of Clockticks
             | Issue: A significant portion of instruction fetches is missing in
             | the instruction cache.
             | 
             | Tips:
             | 
             | 1. Use profile-guided optimization to reduce the size of hot code
             | regions.
             | 
             | 2. Consider compiler options to reorder functions so that hot
             | functions are located together.
             | 
             | 3. If your application makes significant use of macros, try to
             | reduce this by either converting the relevant macros to functions
             | or using linker options to eliminate repeated code.
             | 
             | 4. Consider the Os/O1 optimization level or the following subset
             | of optimizations to decrease your code footprint:
             |     - use inlining only when it decreases the footprint
             |     - disable loop unrolling
             |     - disable intrinsic inlining
             | 
             | Optimization examples:
             | Instruction Cache Misses recipe from Intel VTune Profiler
             | Performance Analysis Cookbook
             |
            ITLB Overhead: 1.6% of Clockticks
            Branch Resteers: 7.7% of Clockticks
             | Issue: A significant fraction of cycles was stalled due to Branch
             | Resteers. Branch Resteers estimate the Front-End delay in
             | fetching operations from corrected path, following all sorts of
             | mispredicted branches. For example, branchy code with lots of
             | mispredictions might get categorized as Branch Resteers. Note the
             | value of this node may overlap its siblings.
             |
            DSB Switches: 0.7% of Clockticks
             | Issue: A significant portion of cycles is spent switching from
             | the DSB to the MITE.  This may happen if a hot code region is too
             | large to fit into the DSB.
             | 
             | Tips: Consider changing code layout (for example, via profile-
             | guided optimization) to help your hot regions fit into the DSB.
             | 
             | See the "Optimization for Decoded ICache" section in the Intel 64
             | and IA-32 Architectures Optimization Reference Manual.
             |
            Length Changing Prefixes: 0.0% of Clockticks
             | Issue: A significant fraction of cycles was stalled due to Length
             | Changing Prefixes (LCPs).
             | 
             | Tips: To avoid this issue, use proper compiler flags. Intel
             | Compiler enables these flags by default.
             | 
             | See the "Length-Changing Prefixes (LCP)" section in the Intel 64
             | and IA-32 Architectures Optimization Reference Manual.
             |
            MS Switches: 3.8% of Clockticks
        Front-End Bandwidth: 11.7% of Pipeline Slots
         | This metric represents a fraction of slots during which CPU was
         | stalled due to front-end bandwidth issues, such as inefficiencies in
         | the instruction decoders or code restrictions for caching in the DSB
         | (decoded uOps cache). In such cases, the front-end typically delivers
         | a non-optimal amount of uOps to the back-end.
         |
            Front-End Bandwidth MITE: 10.7% of Pipeline Slots
             | This metric represents a fraction of cycles during which CPU was
             | stalled due to the MITE fetch pipeline issues, such as
             | inefficiencies in the instruction decoders.
             |
            Front-End Bandwidth DSB: 1.8% of Pipeline Slots
            (Info) DSB Coverage: 33.2%
             | Issue: A significant fraction of uOps was not delivered by the
             | DSB (known as Decoded ICache or uOp Cache). This may happen if a
             | hot code region is too large to fit into the DSB.
             | 
             | Tips: Consider changing the code layout (for example, via
             | profile-guided optimization) to help your hot regions fit into
             | the DSB.
             | 
             | See the "Optimization for Decoded ICache" section in the Intel 64
             | and IA-32 Architectures Optimization Reference Manual.
             |
    Bad Speculation: 2.7% of Pipeline Slots
        Branch Mispredict: 2.7% of Pipeline Slots
        Machine Clears: 0.0% of Pipeline Slots
    Back-End Bound: 43.5% of Pipeline Slots
     | A significant portion of pipeline slots are remaining empty. When
     | operations take too long in the back-end, they introduce bubbles in the
     | pipeline that ultimately cause fewer pipeline slots containing useful
     | work to be retired per cycle than the machine is capable to support. This
     | opportunity cost results in slower execution. Long-latency operations
     | like divides and memory operations can cause this, as can too many
     | operations being directed to a single execution port (for example, more
     | multiply operations arriving in the back-end per cycle than the execution
     | unit can support).
     |
        Memory Bound: 34.6% of Pipeline Slots
         | The metric value is high. This can indicate that the significant
         | fraction of execution pipeline slots could be stalled due to demand
         | memory load and stores. Use Memory Access analysis to have the metric
         | breakdown by memory hierarchy, memory bandwidth information,
         | correlation by memory objects.
         |
            L1 Bound: 11.5% of Clockticks
             | This metric shows how often machine was stalled without missing
             | the L1 data cache. The L1 cache typically has the shortest
             | latency. However, in certain cases like loads blocked on older
             | stores, a load might suffer a high latency even though it is
             | being satisfied by the L1. Note that this metric value may be
             | highlighted due to DTLB Overhead or Cycles of 1 Port Utilized
             | issues.
             |
                DTLB Overhead: 4.0% of Clockticks
                Loads Blocked by Store Forwarding: 1.8% of Clockticks
                Lock Latency: 0.4% of Clockticks
                 | A significant fraction of CPU cycles spent handling cache
                 | misses due to lock operations. Due to the microarchitecture
                 | handling of locks, they are classified as L1 Bound regardless
                 | of what memory source satisfied them. Note that this metric
                 | value may be highlighted due to Store Latency issue.
                 |
                Split Loads: 0.0% of Clockticks
                4K Aliasing: 0.2% of Clockticks
                FB Full: 100.0% of Clockticks
                 | This metric does a rough estimation of how often L1D Fill
                 | Buffer unavailability limited additional L1D miss memory
                 | access requests to proceed. The higher the metric value, the
                 | deeper the memory hierarchy level the misses are satisfied
                 | from. Often it hints on approaching bandwidth limits (to L2
                 | cache, L3 cache or external memory). Avoid adding software
                 | prefetches if indeed memory BW limited.
                 |
            L2 Bound: 1.8% of Clockticks
            L3 Bound: 5.7% of Clockticks
             | This metric shows how often CPU was stalled on L3 cache, or
             | contended with a sibling Core. Avoiding cache misses (L2
             | misses/L3 hits) improves the latency and increases performance.
             |
                Contested Accesses: 1.0% of Clockticks
                Data Sharing: 0.0% of Clockticks
                L3 Latency: 6.8% of Clockticks
                 | This metric shows a fraction of cycles with demand load
                 | accesses that hit the L3 cache under unloaded scenarios
                 | (possibly L3 latency limited). Avoiding private cache misses
                 | (i.e. L2 misses/L3 hits) will improve the latency, reduce
                 | contention with sibling physical cores and increase
                 | performance. Note the value of this node may overlap with its
                 | siblings.
                 |
                SQ Full: 0.0% of Clockticks
                 | This metric measures fraction of cycles where the Super Queue
                 | (SQ) was full taking into account all request-types and both
                 | hardware SMT threads. The Super Queue is used for requests to
                 | access the L2 cache or to go out to the Uncore.
                 |
            DRAM Bound: 10.0% of Clockticks
                Memory Bandwidth: 2.3% of Clockticks
                Memory Latency: 25.9% of Clockticks
                    Local DRAM: 0.0% of Clockticks
                    Remote DRAM: 0.0% of Clockticks
                    Remote Cache: 0.0% of Clockticks
            Store Bound: 17.9% of Clockticks
                Store Latency: 31.3% of Clockticks
                False Sharing: 0.0% of Clockticks
                Split Stores: 0.0% of Clockticks
                DTLB Store Overhead: 2.8% of Clockticks
        Core Bound: 8.9% of Pipeline Slots
            Divider: 0.0% of Clockticks
            Port Utilization: 12.1% of Clockticks
                Cycles of 0 Ports Utilized: 29.6% of Clockticks
                Cycles of 1 Port Utilized: 11.5% of Clockticks
                Cycles of 2 Ports Utilized: 10.4% of Clockticks
                Cycles of 3+ Ports Utilized: 22.1% of Clockticks
                    ALU Operation Utilization: 14.2% of Clockticks
                        Port 0: 10.4% of Clockticks
                        Port 1: 11.6% of Clockticks
                        Port 5: 12.2% of Clockticks
                        Port 6: 22.7% of Clockticks
                    Load Operation Utilization: 14.1% of Clockticks
                        Port 2: 18.5% of Clockticks
                        Port 3: 18.4% of Clockticks
                    Store Operation Utilization: 18.7% of Clockticks
                        Port 4: 18.7% of Clockticks
                        Port 7: 10.0% of Clockticks
    Average CPU Frequency: 2.968 GHz
    Total Thread Count: 10
    Paused Time: 0s
Effective CPU Utilization: 2.7%
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    Average Effective CPU Utilization: 0.439 out of 16
Collection and Platform Info
    Operating System: 5.15.0-47-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION="Ubuntu 22.04.1 LTS"
    Computer Name: ares
    Result Size: 30.1 MB 
    Collection start time: 16:34:44 18/09/2022 UTC
    Collection stop time: 16:37:37 18/09/2022 UTC
    Collector Type: Driverless Perf system-wide sampling
    CPU
        Name: Intel(R) Xeon(R) E5/E7 v3 Processor code named Haswell
        Frequency: 2.400 GHz
        Logical CPU Count: 16
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: not detected

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
