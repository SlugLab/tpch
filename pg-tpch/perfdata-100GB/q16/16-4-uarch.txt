vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /scratchNVME/pg-tpch/perfdata-100GB/q16/16-4-uarch -command stop.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/scratchNVME/pg-tpch/perfdata-100GB/q16/16-4-uarch'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-3269163-ares.sc' file   vtune: Executing actions 12 % Loading 'systemcollector-3269163-ares.sc' file   vtune: Executing actions 12 % Loading 'system-wide.perf' file                  vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `nvme-core.ko'         vtune: Executing actions 19 % Resolving information for `nf_tables.ko'         vtune: Executing actions 19 % Resolving information for `nvme.ko'              vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libm.so.6'            
vtune: Warning: Cannot locate debugging information for file `/lib/modules/5.15.0-47-generic/kernel/drivers/nvme/host/nvme-core.ko'.
vtune: Warning: Cannot locate debugging information for file `/lib/modules/5.15.0-47-generic/kernel/drivers/nvme/host/nvme.ko'.
vtune: Warning: Cannot read load addresses of sections from `/sys/module/nvme-core/sections'. This may affect the correctness of symbol resolution for `/lib/modules/5.15.0-47-generic/kernel/drivers/nvme/host/nvme-core.ko'. Make sure this directory exists and all files in this directory have read permissions.
vtune: Warning: Cannot locate debugging information for file `/lib/modules/5.15.0-47-generic/kernel/net/netfilter/nf_tables.ko'.
vtune: Warning: Cannot read load addresses of sections from `/sys/module/nvme/sections'. This may affect the correctness of symbol resolution for `/lib/modules/5.15.0-47-generic/kernel/drivers/nvme/host/nvme.ko'. Make sure this directory exists and all files in this directory have read permissions.
vtune: Warning: Cannot read load addresses of sections from `/sys/module/nf_tables/sections'. This may affect the correctness of symbol resolution for `/lib/modules/5.15.0-47-generic/kernel/net/netfilter/nf_tables.ko'. Make sure this directory exists and all files in this directory have read permissions.
vtune: Executing actions 20 % Resolving information for `libm.so.6'            vtune: Executing actions 21 % Resolving information for `libm.so.6'            vtune: Executing actions 21 % Resolving information for `postgres'             
vtune: Warning: Cannot locate file `vmlinux'.
vtune: Executing actions 21 % Resolving information for `vmlinux'              
vtune: Warning: Cannot locate debugging information for the Linux kernel. Source-level analysis will not be possible. Function-level analysis will be limited to kernel symbol tables. See the Enabling Linux Kernel Analysis topic in the product online help for instructions.
vtune: Executing actions 22 % Resolving information for `vmlinux'              vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving interrupt name information             vtune: Executing actions 26 % Resolving interrupt name information             vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 72.430s
    Clockticks: 180,588,000,000
    Instructions Retired: 336,996,000,000
    CPI Rate: 0.536
    Retiring: 46.9% of Pipeline Slots
        Light Operations: 45.4% of Pipeline Slots
        Heavy Operations: 1.6% of Pipeline Slots
            Microcode Sequencer: 1.6% of Pipeline Slots
                Assists: 0.0% of Pipeline Slots
                CISC: 1.6% of Pipeline Slots
    Front-End Bound: 11.6% of Pipeline Slots
        Front-End Latency: 0.2% of Pipeline Slots
            ICache Misses: 0.2% of Clockticks
            ITLB Overhead: 0.2% of Clockticks
            Branch Resteers: 2.1% of Clockticks
            DSB Switches: 3.5% of Clockticks
            Length Changing Prefixes: 0.0% of Clockticks
            MS Switches: 0.4% of Clockticks
        Front-End Bandwidth: 11.5% of Pipeline Slots
            Front-End Bandwidth MITE: 9.2% of Pipeline Slots
            Front-End Bandwidth DSB: 7.8% of Pipeline Slots
            (Info) DSB Coverage: 67.3%
    Bad Speculation: 4.3% of Pipeline Slots
        Branch Mispredict: 4.3% of Pipeline Slots
        Machine Clears: 0.0% of Pipeline Slots
    Back-End Bound: 37.1% of Pipeline Slots
     | A significant portion of pipeline slots are remaining empty. When
     | operations take too long in the back-end, they introduce bubbles in the
     | pipeline that ultimately cause fewer pipeline slots containing useful
     | work to be retired per cycle than the machine is capable to support. This
     | opportunity cost results in slower execution. Long-latency operations
     | like divides and memory operations can cause this, as can too many
     | operations being directed to a single execution port (for example, more
     | multiply operations arriving in the back-end per cycle than the execution
     | unit can support).
     |
        Memory Bound: 17.7% of Pipeline Slots
            L1 Bound: 13.9% of Clockticks
                DTLB Overhead: 2.5% of Clockticks
                Loads Blocked by Store Forwarding: 0.4% of Clockticks
                Lock Latency: 0.0% of Clockticks
                Split Loads: 0.0% of Clockticks
                4K Aliasing: 1.0% of Clockticks
                FB Full: 0.0% of Clockticks
            L2 Bound: 0.0% of Clockticks
            L3 Bound: 2.9% of Clockticks
                Contested Accesses: 0.0% of Clockticks
                Data Sharing: 0.0% of Clockticks
                L3 Latency: 3.8% of Clockticks
                SQ Full: 0.0% of Clockticks
            DRAM Bound: 10.2% of Clockticks
                Memory Bandwidth: 1.0% of Clockticks
                Memory Latency: 68.2% of Clockticks
                    Local DRAM: 9.2% of Clockticks
                    Remote DRAM: 0.0% of Clockticks
                    Remote Cache: 0.0% of Clockticks
            Store Bound: 8.3% of Clockticks
                Store Latency: 5.9% of Clockticks
                False Sharing: 0.0% of Clockticks
                Split Stores: 0.0% of Clockticks
                DTLB Store Overhead: 0.7% of Clockticks
        Core Bound: 19.5% of Pipeline Slots
         | This metric represents how much Core non-memory issues were of a
         | bottleneck. Shortage in hardware compute resources, or dependencies
         | software's instructions are both categorized under Core Bound. Hence
         | it may indicate the machine ran out of an OOO resources, certain
         | execution units are overloaded or dependencies in program's data- or
         | instruction- flow are limiting the performance (e.g. FP-chained long-
         | latency arithmetic operations).
         |
            Divider: 0.0% of Clockticks
            Port Utilization: 34.6% of Clockticks
             | Issue: A significant fraction of cycles was stalled due to Core
             | non-divider-related issues.
             | 
             | Tips: Use vectorization to reduce pressure on the execution ports
             | as multiple elements are calculated with same uOp.
             |
                Cycles of 0 Ports Utilized: 30.0% of Clockticks
                 | CPU executed no uOps on any execution port during a
                 | significant fraction of cycles. Long-latency instructions
                 | like divides may contribute to this issue. Check the Assembly
                 | view and Appendix C in the Optimization Guide to identify
                 | instructions with 5 or more cycles latency.
                 |
                Cycles of 1 Port Utilized: 10.6% of Clockticks
                 | This metric represents cycles fraction where the CPU executed
                 | total of 1 uop per cycle on all execution ports. This can be
                 | due to heavy data-dependency among software instructions, or
                 | oversubscribing a particular hardware resource. In some other
                 | cases with high 1_Port_Utilized and L1 Bound, this metric can
                 | point to L1 data-cache latency bottleneck that may not
                 | necessarily manifest with complete execution starvation (due
                 | to the short L1 latency e.g. walking a linked list) - looking
                 | at the assembly can be helpful. Note that this metric value
                 | may be highlighted due to L1 Bound issue.
                 |
                Cycles of 2 Ports Utilized: 17.1% of Clockticks
                Cycles of 3+ Ports Utilized: 43.2% of Clockticks
                    ALU Operation Utilization: 25.0% of Clockticks
                        Port 0: 19.8% of Clockticks
                        Port 1: 20.0% of Clockticks
                        Port 5: 20.1% of Clockticks
                        Port 6: 40.0% of Clockticks
                    Load Operation Utilization: 29.1% of Clockticks
                        Port 2: 34.6% of Clockticks
                        Port 3: 36.0% of Clockticks
                    Store Operation Utilization: 30.8% of Clockticks
                        Port 4: 30.8% of Clockticks
                        Port 7: 18.4% of Clockticks
    Average CPU Frequency: 3.100 GHz
    Total Thread Count: 8
    Paused Time: 0s
Effective CPU Utilization: 5.0%
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    Average Effective CPU Utilization: 0.804 out of 16
Collection and Platform Info
    Operating System: 5.15.0-47-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION="Ubuntu 22.04.1 LTS"
    Computer Name: ares
    Result Size: 21.9 MB 
    Collection start time: 01:20:50 19/09/2022 UTC
    Collection stop time: 01:22:02 19/09/2022 UTC
    Collector Type: Driverless Perf system-wide sampling
    CPU
        Name: Intel(R) Xeon(R) E5/E7 v3 Processor code named Haswell
        Frequency: 2.400 GHz
        Logical CPU Count: 16
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: not detected

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
